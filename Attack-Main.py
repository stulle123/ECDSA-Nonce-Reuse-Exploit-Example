from hashlib import sha512

from ecdsa import VerifyingKey
from ecdsa.numbertheory import inverse_mod
from ecdsa.util import sigdecode_der

_BUF_SIZE = 65536
_PUBLIC_KEY_PEM = "path_to_public_key_in_PEM_format"
_FILE_1 = "path_to_foo_file"
_FILE_2 = "path_to_bar_file"
_SIG_DER_1 = "path_to_foo_signature"
_SIG_DER_2 = "path_to_bar_signature"

def compute_hash(file_name):
    my_sha512 = sha512()

    with open(file_name, "rb") as f:
        while True:
            data = f.read(_BUF_SIZE)
            if not data:
                break
            my_sha512.update(data)

    return my_sha512.hexdigest()

def attack(publickey_order_integer, signature_pair_1, signature_pair_2, hash_1, hash_2): 
    r1 = signature_pair_1[0]
    s1 = signature_pair_1[1]
    r2 = signature_pair_2[0]
    s2 = signature_pair_2[1]

    # Convert hex to int
    l1 = int(hash_1, 16)
    l2 = int(hash_2, 16)

    if (r1 != r2):
        print("ERROR: The signature pairs given are not susceptible to this attack.")
        return None

    numerator = (((s2 * l1) % publickey_order_integer) - ((s1 * l2) % publickey_order_integer))
    denominator = inverse_mod(r1 * ((s1 - s2) % publickey_order_integer), publickey_order_integer)

    private_key = numerator * denominator % publickey_order_integer

    return private_key

if __name__ == "__main__":
    # Open ECDSA public key in PEM format
    with open(_PUBLIC_KEY_PEM) as f:
        pub_key = VerifyingKey.from_pem(f.read())
       
    # Open signatures in DER format
    # $ xxd -r -p signature.txt > signature.bin
    with open(_SIG_DER_1, "rb") as s1, open(_SIG_DER_2, "rb") as s2:
        sig_1 = s1.read()
        sig_2 = s2.read()

    # Pull out the signature pairs
    r1, s1 = sigdecode_der(sig_1, pub_key.pubkey.order)
    r2, s2 = sigdecode_der(sig_2, pub_key.pubkey.order)

    # Compute the SHA512 hashes
    message_hash_1 = compute_hash(_FILE_1)
    message_hash_2 = compute_hash(_FILE_2)
    
    # Start the attack
    private_key = attack(pub_key.pubkey.order, (r1,s1), (r2,s2), message_hash_1, message_hash_2)    
    print(private_key)
